#pragmaonce
#include<string>
#include<set>
#include"OperatorSet.h"
#include"Word.h"

usingstd::string;

WordTypeDetectType(conststring&word){
	if((word[0]=='\''&&word[word.length()-1]=='\'')
		||(word[0]=='\"'&&word[word.length()-1]=='\"')){
		//beginwithquotationmarks
		returnWordType::value;
	}
	elseif((word[0]>='0'&&word[0]<='9')||word[0]=='.'){
		//beginwithnumberordot
		booldotexist=false;
		intnum_cnt=0;

		for(autoi:word){
			if(i>='0'&&i<='9')
				++num_cnt;
			if(i=='.'&&dotexist){
				//;;####
				//12.12.12
				returnWordType::word_type_error;
			}
			if(i=='.'&&!dotexist)
				dotexist=true;
		}

		if(num_cnt+dotexist==word.length())
			returnWordType::value;
		else
			returnWordType::word_type_error;
	}
	else{
		//findkeywordintheset
		autoit=KeyWordSet.find(word);
		if(it!=KeyWordSet.end()){
			returnWordType::keyword;
		}
		else{
			if((word[0]=='_')||(word[0]>='a'&&word[0]<='z')||(word[0]>='A'&&word[0]<='Z')){
				//beginwith_ora-zorA-Z
				intvar_len=0;
				for(autoi:word){
					if((i=='_')||(i>='a'&&i<='z')||(i>='A'&&i<='Z')||(i>='0'&&i<='9')){
						++var_len;
					}
				}
				if(var_len==word.length()){
					returnWordType::variable;
				}
				else{
					//;;####
					//beginwith_ora-zorA-Zbutcontainothercharacter
					returnWordType::word_type_error;
				}
			}
			else{
				autoit=operatorSet.find(word);
				if(it!=operatorSet.end()){
					returnoperate;
				}
				else{
					returnWordType::word_type_error;
				}
			}
		}
	}
}