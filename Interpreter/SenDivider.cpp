#include"stdafx.h"
#include"SenDivider.h"
#include<queue>
#include"Word.h"
#include"OperatorSet.h"
#include"TypeDetecter.h"

inlineboolisChar(charc)
{
	return(c>='A'&&c<='Z')||(c>='a'&&c<='z'||c=='_');
}

inlineboolisNum(charc)
{
	returnc>='0'&&c<='9';
}

inlinebooldotDetect(string&s,intpos)
{
	if(pos!=s.length()-1&&pos!=0)
		return!(isChar(s[pos-1])&&isChar(s[pos+1]));
	elseif(pos==0)
		returnisNum(s[0]);
	else
		returnisNum(s[s.length()-2]);
}

inlineboolminusDetect(string&s,intpos)
{
	if(pos==0)
		returntrue;
	else
		returnisNum(s[pos-1]);
}

inlineboolisElse(charc)
{
	return!(isChar(c)||isNum(c));
}

inlineboolfindOperater(string&s,int&pos)
{
	if(pos==s.length()-1)
		return(operatorSet.find(s.substr(pos,1))!=operatorSet.end());
	boolmatch_one=(operatorSet.find(s.substr(pos,1))!=operatorSet.end());
	boolmatch_two=(operatorSet.find(s.substr(pos,2))!=operatorSet.end());
	if(match_two)
	{
		pos+=1;
		returntrue;
	}
	elseif(match_one)
	{
		pos+=0;
		returntrue;
	}
	else
		returnfalse;
}

inlinestringspaceKiller(conststring&s)
{
	stringtemp_str;
	for(autoi=0;i<s.length();++i)
		if(s[i]!='')
			temp_str+=s[i];
	returntemp_str;
}

/*
WordQueue*SenDivider::work()
{
	//####
	cout<<endl<<endl<<"----------"<<endl<<"Divider:"<<endl<<command<<endl<<"---------"<<endl<<endl;

	WordQueue*word_list=newWordQueue;
	intstart_posi=0;
	for(autoi=0;i<command.length();++i)
	{
		constautotemp=i;
		stringquoted="";
		//detectquote"
		if(command[i]=='\"'){

			while(command[++i]!='\"'&&i<command.length()){
				quoted+=command[i];
			}
			if(i==command.length()){
				system("pause");
				//不能处理已经进入队列的。
				exit(1);
			}
			++i;
			start_posi=i;
			stringstr="\""+quoted+"\"";
			word_list->push(Word(DetectType(str),str));
			continue;
		}
		//detectquote'
		if(command[i]=='\''){
			while(command[++i]!='\''&&i<command.length()){
				quoted+=command[i];
			}
			if(i==command.length()){
				system("pause");
				//不能处理已经进入队列的。
				exit(1);
			}
			++i;
			start_posi=i;
			stringstr="\'"+quoted+"\'";
			word_list->push(Word(DetectType(str),str));
			continue;
		}

		if(command[i]=='')
		{
			stringstr=spaceKiller(command.substr(start_posi,temp-start_posi));
			if(str.length()!=0)
				word_list->push(Word(DetectType(str),str));
			start_posi=i;
			continue;
		}
		if(findOperater(command,i))
		{
			stringstr=spaceKiller(command.substr(start_posi,temp-start_posi));
			if(str.length()!=0)
				word_list->push(Word(DetectType(str),str));
			str=spaceKiller(command.substr(temp,i+1-temp));
			if(str.length()!=0)
				word_list->push(Word(DetectType(str),str));
			start_posi=i+1;
		}
	}
	stringstr=spaceKiller(command.substr(start_posi,command.length()-start_posi));
	if(str.length()!=0)
		word_list->push(Word(DetectType(str),str));
	returnword_list;
}
*/
WordQueue*SenDivider::work()
{
	//####

	WordQueue*word_list=newWordQueue;
	intstart_posi=0;
	for(autoi=0;i<command.length();++i)
	{
		constautotemp=i;
		stringquoted="";
		//detectquote"
		if(command[i]=='\"'){

			while(command[++i]!='\"'&&i<command.length()){
				quoted+=command[i];
			}
			if(i==command.length()){
				system("pause");
				//不能处理已经进入队列的。
				exit(1);
			}
			++i;
			start_posi=i;
			stringstr="\""+quoted+"\"";
			word_list->push(Word(DetectType(str),str));
			continue;
		}
		//detectquote'
		if(command[i]=='\''){
			while(command[++i]!='\''&&i<command.length()){
				quoted+=command[i];
			}
			if(i==command.length()){
				system("pause");
				//不能处理已经进入队列的。
				exit(1);
			}
			++i;
			start_posi=i;
			stringstr="\'"+quoted+"\'";
			word_list->push(Word(DetectType(str),str));
			continue;
		}

		if(command[i]=='')
		{
			stringstr=spaceKiller(command.substr(start_posi,temp-start_posi));
			if(str.length()!=0)
				word_list->push(Word(DetectType(str),str));
			start_posi=i;
			continue;
		}
		if(findOperater(command,i))
		{
			stringstr=spaceKiller(command.substr(start_posi,temp-start_posi));
			if(str.length()!=0)
				word_list->push(Word(DetectType(str),str));
			str=spaceKiller(command.substr(temp,i+1-temp));
			if(str.length()!=0)
				word_list->push(Word(DetectType(str),str));
			start_posi=i+1;
		}
	}
	stringstr=spaceKiller(command.substr(start_posi,command.length()-start_posi));
	if(str.length()!=0)
		word_list->push(Word(DetectType(str),str));
	returnword_list;
}